/////////////////////
OPERATORE TERNARIO
////////////////////

Operatore ternario: aiuta a semplificare una IF
        
	1 condizione
	2 cosa fare se vero
	3 cosa fare se falso

int a=10;
        int b=20;
        
        int max;
        
        if(a>b) {
            max=a;
        }else {
            max=b;
        }
        
        
        max=(a>b)?a:b; ------> ?= if : = else

int a=10;
        int b=10;
        
        int max;
        
        if(a>b) {
            max=a;
        }else if (a==b) {
        max=0; 
        }else{
            max=b;
        }
        
        
        max=(a>b)?a:(a==b)?0:b; ------> ?=if :?=else if :=else


////////////////
    SWITCH
///////////////

int i=3;
        if(i==0) {
            System.out.println("i==0");
        }else if(i==1){
            System.out.println("i==1");
        }else if(i==2){
            System.out.println("i==2");
        }else{
            System.out.println("i Ã¨ diverso 0,1,2");
        }

        
        switch (i) {
            case 0:
                System.out.println("i==0");
                break;
            case 1:
                System.out.println("i==1");
                break;
            case 2:
                System.out.println("i==2");
                break;
            default:
                System.out.println("i Ã¨ diverso 0,1,2");
        }

Lo scopo di usare i BREAK è interrompere la condizione. 

String lettera="i";
        String messaggio;
        
        switch(lettera){
            
            case"a":
            case"e":
            case"i":
            case"o":
            case"u":
                messaggio="vocale";
                break;
            default:
                messaggio="consonante";
        }
        
        System.out.println(messaggio);

In questo caso utile non mettere BREAK perchè voglio tutte le vocali e voglio che provi tutti i casi.

 switch(lettera){
            case "a","e","i","o","u" ->messaggio="vocale";
            default ->messaggio="consonante";
        }


//////////////

FOR è composto da 3 parti
1° inizializzazione del contatore -> int=0
2° condizione -> i<10
3° incremento -> i++

for(int i=0; i<10; i++)
for (int i = 10; i >0; i--) 
for (int i = 0; i < 10; i+=2)

 int contatore=0;  -->1°
        for (; contatore < 10;) { --->2°
            System.out.println(contatore);
            contatore++; -->3°
        }

 for (int i = 0, j=10; i < 10; i++, j--) {
            System.out.println(i+ " "+j);
        }

//////////////////////////////

Random r= new Random();
        int casuale=r.nextInt(1,21); //1-20
        boolean trovato=false; --> stato iniziale

        for (int i = 1; i <= 10; i++) {
            System.out.println(i);
            
            if(i==casuale){
                trovato=true; --> cambiamento di stato
                System.out.println("trovato");
                break;

controllo di stato a fine codice
String siNo trovato?"il numero è trovato":"non è stato trovato";
      System.out.println(siNo);

--------------------------------------------------------------------------------

for (double elementi : arrDouble) {     FOR NON C'E' INDI
            System.out.println(elementi);
        }

for (int i = 0; i < 5; i++) {            ASSEGNAZIONE DINAMICA. valorizzato i valori dell'indice
        arr[i]=i;                       del for
        }
--------------------------------------------------------------------
   ////qual è la stringa più lunga////

 String[] animali = {"cane", "gatto", "criceto", "giorgio","tricheco"};

        
        int lung = animali[0].length();
        System.out.println(lung);
        String piuLunga =animali[0];
        
        for(int i = 0; i < animali[i].length(); i++) {
        System.out.println(animali[i].length());
        
            if(lung > animali[i].length()){
                piuLunga=animali[i];
                
            }
                
            
        }

----------------------------------------------------

22/06/2023

 
        //funzione di callback
        lista.forEach(nani ->System.out.println(nani) );
        
        //method reference
        lista.forEach(System.out::println);
        
        lista.remove("eolo");
        //lista.remove(0);

	.add() aggiunge un elemento in coda
        .add(0, x) aggiunge x in prima posizione
        .remove(i) rimuovo l'elemento alla posizione i
        .size() ritorna dimensione di ArrayList
        .get(i) ritorna l'elemento all'indice i
        .set(i, a) assegna il valore a nella posizione i
        .isEmpty() controlla se l'arraylist è vuoto
        .contains(x) controlla se x è contenuto nell'array
        


---------------------------------------------------------
GESTIONE ECCEZIONI

vado a gestire l'eccezione particolare però se ho più eccezioni a priori ne metto una generale
se sbaglio a mettere l'eccezione e non ci sono altre opzioni continua ad andare in errore, se ha una opzione di tipo generico salta l'eccezione sbagliata e passa a quello dopo.

 try{
    int c=a/b;
        System.out.println(c);
    }catch(NullPointerException | ArithmeticException e){
        System.out.println("niente panico è solo diviso 0" + e.getMessage());  
    }catch(Exception e){
        System.out.println("altro errore che non so qual è" + e.getMessage());
    }finally{
        System.out.println("vengo eseguito comunque anche se non ci sono errori");
    }

possiamo avere vari tipi di eccezioni legate tra di loro tra and e or
ogni try-catch può avere il suo finally.finally quando si utilizzano risorse esterne

nel TRY sollevo un'eccezione
nel CATCH gestico l'eccezione

  //  PROPAGAZIONE DELLE ECCEZIONI
        try{
            System.out.println("blocco try esterno");  
            
            try{
                System.out.println("blocco try interno");  
                throw new Exception("eccezione sollevata dal blocco interno");
                
                
            }catch(ArithmeticException e){
                System.out.println("gestisco l'eccezione del blocco interno");    
            }finally{
                 System.out.println("finally del blocco interno");
            }

        }catch(Exception e){
            System.out.println("Sto gestendo l'eccezione che non è gestita dal blocco interno");
            
        }finally{
            System.out.println("finally del blocco esterno");
        }
        

metodo checked sono obbligato a mettere il metodo quando lo richiamo. tutte le risorse esterne devo essere tra try-checked.








