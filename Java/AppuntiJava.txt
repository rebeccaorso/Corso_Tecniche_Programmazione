Metodo dei container.
----------------------------
19/06/2023

è TodoList che aggrega Todo. Il legame debole è rappresentato da un rombo vuoto.
La classe mioScanner ha come proprieta lo scanner.

mioScanner lo uso nella TodoList 

ogni elemento del carrello sarà un prodoto. 
metterò il modello del dato sta nel model, fa si che il nome completo sia model.Prodotto.
Il package è come se fosse il cognome. package in minuscolo, classe in maiuscolo.

le proprietà sono private e quindi non sono modificabili dall'esterno.

il costruttore del prodotto si deve chiamare come la classe e non ha metodo di ritorno.
il costruttore posso mettere una annotazione di java doc. mi serve a utilizzare un nuovo prodotto di quel tipo

Super fa riferimento alla super class, al genitore.
Il costruttore NON SI EREDITA.

public Prodotto(String nome, String codice, double prezzo);
(String nome, String codice, double prezzo) = la firma.

noi determiniamo le capacità di un oggetto in base ai permessi che gli diamo.

Incapsulamento, devo nascondere all'esterno i dati.

model cuore del sistema.

il prodotto lo devo mettere nel contenitore -> ProdottoCtrl

prodotti è un contenitore di prodotto.


public void addProdotto(Prodotto p, int pos) {
METODO PER AGGIUNGERE il prodotto p alla posizione pos.Se pos già occupata viene sovrascritta

aggiungere il prodotto alla prima posizione disponibile
se non c'è posto e devo ritornare un intero e quindi potrebbe ritornare un numero negativo, non zero perchè zero prima posizione dell'array. -1 usato per una posizione non disponibile.
se lo trova ritorna un numero da 0 in pìsù, 0 compreso.

se non c0è nulla (null) ritorna la posizione.
return esce dal ciclo.

per ogni prodotto io aggiungo prodotto allo scontrino. programmazione procedurale.
scatola vuota logica per riempire la scatola.
prevede la creazione di variabili prima della logica.

public String stampa() {
		String scontrino = "";
		for (Prodotto prodotto : prodotti) {
			scontrino += prodotto + "\n";
		}
		return scontrino;
	}


static java lo usa dentro .Math, dentro .Arrays, .System. java non gli piace static, static è della classe.

posso esportare:
JAR java archive
runnable JAR file: eseguibile per la macchina virtuale

creare cartella lib posso importare un JAR. informare eclipse con buiid path (processo di compilazione) che è una libreria utilizzabile.
non abbiamo il codice sorgente, tutto cio che è privato non lo vediamo. abbiamo solo la parte eseguibile.

////

Studente = model
proprietà matricola, nome, cognome.
costruisco il costruttore.

noi non vogliamo che sia modificabile, ti do solo i getters. il get ti permette di leggere la proprietà. i set per modificarla per questo non vengono concessi in questo caso

toString ritorna la stringa con tutti i valori.

oggetto registro nel model
aggregato di studenti. ArrayList. tra le angolari devo mettere il tipo del dato. 
private ArrayList<Studente> elenco;
l'arraylist è di tipo dinamica. è una classe per gestire le collezioni. ammette duplicati.

registro ha due proprietà
una di tipo array e una di tipo stringa.

un'aulaCtrl ha come sua proprietà il Registro

serve un metodo per aggiungere studente.
il registro ha dei metodi, uno di questi è getElenco, mi ritorna elenco, un array di studenti.
metodo add degli arrayList sa già come aggiungere nel primo posto libero, non devo fare la ricerca del posto.

deve essere il controller a dare il registro.

view package che si vede. AulaDemo --> main
dentro aula inizializzata c'è il registro inizializzato
foreach per ogni studente chiamo il controller e stampo lo studente.

se hai una lista di nomi su un file di testo.
new folder 'files' e creo un file di testo.
devi preoccuparti del possibile fallimento perchè i files non dipendono da java. ti obbliga a gestire l'ipotesi che non venga trovato. 
"surround with try and catch"

---------------------------------------------------------------

26/06/2023

variabili tipo primitivo
variabili tipo reference
array costrutto del linguaggio, va inizializzato come oggetto. grandezza dichiarata nel momento 
length è una proprieta per i primitivi e array
length è un metodo per le striinghe e ha bisogno di ()
operatori servono  per concatenare.
= assegnazione
operatore relazionale == in java no 3= perche abbiamo già dichiarato il tipo e non serve questo confronto.

controllo del flusso
strutture sintattiche -> bivi if /switch
operatore ternario conviene tenerlo semplice, al massimo un bivio. logica binaria. vero o falso.
è preferibile dividere un problema in un sottoproblema più semplice? sì

strutture iterative:
for ciclo di lunghezza definita, dobbiamo creare una variabile di supporto. costrutto per scorrere []

se ho obbligatoriamente un input e ritorno sempre un output è una funzione

programmazione orientata agli oggetti:
nasce con lo scopo di simulare, modellare la realtà nei linguaggi di programmazione.
si basa su classe e oggetti

è l'oggetto che tiene in sè sia l'informazione che il metodo.

è normale avere molte classi nel modello, perchè rappresenta la scomposizione in oggetti.
classi che modellano questi oggetti.

un paradigma, uno schema di progettazione è il MVC (model - view - controller). esistono anche altri approcci. prevede che l'utente vede una vista che gli permette di interagire. controller capisce quello che voglio fare e si interfaccia con il cuore del programma, il model, che ritorna una vista.

CRUD / VERBS
to post = aggiungere una risorsa che non c'era
to update = modificare risorsa esistente
to get = prendere una risorsa esistente
to delete = cancellare una risorsa


query string: stringa per fare richiesta con get

Tomcat di Apache. ci permette di usare java e eclipse per motare una web application

---------------------------------------------------------------------------------------------

03/07/2023

interfaccia

model=contenuto -> le classi che rappresentano il contenuto
view= vista-interfaccia-web app
controller= logica che mi permette di controllare 

La classe può essere dichiarata astratta anche se non ha metodi astratti. Ma basta un metodo astratto per DOVER dichaiarare la classe come astratta.

costruttore e tutto ciò che è privato non si eredita

modificatore di accesso
+ public
- private
# protected

programmazione per contratto

interfaccia legge l'input dell'utente

incapsulamento: ti impedisce di accedere all'interno
ereditarietà: modello gerarchico di classi

polimorfismo è aiutati dalle interfacce

oggetto volante

cos'è una classe? classe astratta? interfaccia? differenze?

una interfaccia PUO ESTENDERE un'altra interfaccia. una.
una interfaccia NON è completamente astratta. 
può essere vuota, usata solo per raggruppare. -> MARKER
le interfacce che hanno un solo metodo -> Single Abstract method - annotazione @FunctionalInterface
Predicate - boolean test(T t) confronto tipo
Consumer - void accept(T t)
Supplier- T get()
Function - R apply(T t)

serializzare

lambda ->

programmazione per contratto

approccio procedurale:
for (String elemento : moto3) {
System.out.println(elemento);
}

approccio funzionale:
moto3
     .forEach(m->System.out.println(m));

Predicate - boolean test(T t)
.filter(m-> m.length()>4) filtri. faccio passare solo quelli che sono più lunghi di 4
.filter(m-> m.endsWith("i")) finisce per i.

le mie istruzioni non hanno effetti collaterali.
l'approccio funzionale non deve avere effetti collaterali, senza "disturbare" il DB.

il costruttore può essere privato
si possono mettere più classi in

//visualgo//
come fai ad ordinare le cose?

posso usare sort dopo avere implementato Comparable
Collections.sort(libri); è stata permanentemente modificata la posizione. non è programmazione funzionale

comparable è sulla classe, è un solo criterio
Comparator fuori dalla classe model. vogliono ritornare un INT 

---------------------------------------------------------------
10.07.2023
JSON = elemento fondamentale per il collegamento.

Servlet = classe astratta.
non sa cosa vuoi fare con essa
servlet specializzata in un protocollo http
intercetta get e post.

il DB gira su un server diverso. occupa due porte (8080 localhost) - (3306 mySQL)

connessione al db con il driver 
model trasformazione del record del db ad oggetto java

postman- thunder 
viste sono la rappresentazione dello stato del dato.

REST : trasferimento dello stato in cui si trovano le risorse.

logica da spostare da server a client.
servlet -> controller/filtro capisce se arriva get o post.
jsp la chiedo al server

Spring lavora con notation

httpServlet classe astratta
ma i metodi della super non sono astratti o mi segnerebbe errore rosso

object -> genericServlet -> httpServlet
riceve le richieste direttamente dal client.
form method post
diversamente è sempre get

@WebServlet("/elencofilm") rotta

è il webserver a creare un nuovo Oggetto quando riceve una chiamata qui ("/elencofilm")

http ha dei metodi. fondamentali per capire da dove è passata la richiesta.

(HttpServletRequest request, HttpServletResponse response) -> Richiesta e Risposta

<%@ include file="menu.jsp" %> con questo si fa l'inclusione

la vista non ha il dato.

getRequestDispatcher("lista.jsp").forward(request, response); può richiamare un'altra servlet non solo una pagina.
servlet riceve le richieste, ottiene i dati


















